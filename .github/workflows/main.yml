name: vp actions
on: workflow_dispatch
env:
    AWS_REGION: us-east-2
    ECR_REPOSITORY: vpapp
    EKS_CLUSTER: vp-eks

jobs:
    Testing:
        runs-on: ubuntu-latest
        steps:
          - name: Code checkout
            uses: actions/checkout@v4

          - name: Maven test
            run: mvn test

          - name: Checkstyle
            run: mvn checkstyle:checkstyle
        
          # Setup Java 11 to be default (sonar-scanner requirement as of 5.x)
          - name: Set Java 11
            uses: actions/setup-java@v3
            with:
                distribution: 'temurin'
                java-version: '11'

          - name: Setup SonarQube
            uses: warchant/setup-sonar-scanner@v7
            
          # Run sonar-scanner
          - name: SonarQube Scan
            run: |
              sonar-scanner \
                -Dsonar.host.url=${{ secrets.SONAR_URL }} \
                -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
                -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
                -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
                -Dsonar.sources=src/ \
                -Dsonar.junit.reportsPath=target/surefire-reports/ \
                -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
                -Dsonar.java.binaries=target/test-classes/com/visualpathit/account
        
          # Check the Quality Gate status
          - name: SonarQube Quality Gate check
            id: sonarqube-quality-gate-check
            uses: sonarsource/sonarqube-quality-gate-action@master
            timeout-minutes: 5
            env:
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL

    BUILD_AND_PUBLISH:
      needs: Testing
      runs-on: ubuntu-latest
      steps:
        - name: Code checkout
          uses: actions/checkout@v4

        - name: Upload image to ECR
          uses: appleboy/docker-ecr-action@master
          with:
            access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
            secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            registry: ${{ secrets.REGISTRY }}
            cache_from: ${{ env.ECR_REPOSITORY }}
            repo: ${{ env.ECR_REPOSITORY }}
            region: ${{ env.AWS_REGION }}
            tags: latest, ${{ github.run_number }}
            daemon_off: false
            dockerfile: ./Dockerfile
            context: ./

    DeployToEks:
      needs: BUILD_AND_PUBLISH
      runs-on: ubuntu-latest
      steps:
        - name: Code checkout
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

        - name: Get Kube config file
          run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}
        
        - name: Print config file
          run: cat ~/.kube/config

        - name: Delete existing Docker registry secret (if exists)
          run: |
            kubectl delete secret regcred --ignore-not-found

        - name: Install Helm
          uses: azure/setup-helm@v1
          with:
              version: 'v3.9.4'


        - name: Login to ECR
          run: |
            kubectl create secret docker-registry regcred \
              --docker-server=${{ secrets.REGISTRY }} \
              --docker-username=AWS \
              --docker-password=$(aws ecr get-login-password) \

        - name: Deploy Helm
          uses: ccapell/action-deploy-eks-helm@v1.0.3
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
            cluster-name: ${{ env.EKS_CLUSTER }}
            #config-files: .github/values/dev.yaml
            chart-path: helm/vpcharts
            namespace: default
            values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
            name: vp-stack